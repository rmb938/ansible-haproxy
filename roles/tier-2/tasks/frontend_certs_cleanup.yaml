- name: Find existing certificate files
  ansible.builtin.find:
    paths: "/etc/ssl/private/step-ca/"
    patterns: "haproxy-*.crt"
  register: existing_certs

- name: Generate expected certificate filenames
  ansible.builtin.set_fact:
    expected_cert_basenames: "{{ haproxy_hosts | dict2items | map(attribute='key') | list }}"

- name: Create full expected certificate paths
  ansible.builtin.set_fact:
    expected_certs: "{{ expected_cert_basenames | map('regex_replace', '^', '/etc/ssl/private/step-ca/haproxy-') | map('regex_replace', '$', '.crt') | list }}"

- name: Find unmanaged certificate files
  ansible.builtin.set_fact:
    unmanaged_certs: "{{ existing_certs.files | map(attribute='path') | difference(expected_certs) | list }}"

- name: Remove unmanaged certificate files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop: "{{ unmanaged_certs }}"
  when: unmanaged_certs | length > 0

- name: Find existing key files
  ansible.builtin.find:
    paths: "/etc/ssl/private/step-ca/"
    patterns: "haproxy-*.crt.key"
  register: existing_keys

- name: Generate expected key filenames
  ansible.builtin.set_fact:
    expected_key_basenames: "{{ haproxy_hosts | dict2items | map(attribute='key') | list }}"

- name: Create full expected key paths
  ansible.builtin.set_fact:
    expected_keys: "{{ expected_key_basenames | map('regex_replace', '^', '/etc/ssl/private/step-ca/haproxy-') | map('regex_replace', '$', '.crt.key') | list }}" # noqa: yaml[line-length]

- name: Find unmanaged key files
  ansible.builtin.set_fact:
    unmanaged_keys: "{{ existing_keys.files | map(attribute='path') | difference(expected_keys) | list }}"

- name: Remove unmanaged key files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop: "{{ unmanaged_keys }}"
  when: unmanaged_keys | length > 0
